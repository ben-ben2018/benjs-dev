{
  "version": 3,
  "sources": ["../src/index.ts", "../../utils/basic.ts", "../src/reactivity.ts"],
  "sourcesContent": ["export * from \"./reactivity\"", "const _toString = Object.prototype.toString;\r\n\r\nfunction isObject(obj: any) { return typeof obj === 'object' }\r\nfunction isDef(v: any) { return v !== undefined && v !== null }\r\nfunction isPlainObject(obj: any) { return _toString.call(obj) === '[object Object]' }\r\nfunction isPromise(val: any) { return (isDef(val) && typeof val.then === 'function' && typeof val.catch === 'function') }\r\n\r\nfunction toString(val: any) {\r\n    if (val == null) return \"\"\r\n    return Array.isArray(val) || (isPlainObject(val) && val.toString === _toString) ? JSON.stringify(val, null, 2) : String(val)\r\n}\r\nfunction toNumber(val: any) {\r\n    let n = parseFloat(val);\r\n    return isNaN(n) ? val : n\r\n}\r\n\r\nfunction toMap(str: string, expectsLowerCase: boolean) {\r\n    let map = Object.create(null);\r\n    let list = str.split(',');\r\n    for (let i = 0; i < list.length; i++) map[list[i]] = true;\r\n    return expectsLowerCase ? function (val: string) { return map[val.toLowerCase()]; } : function (val: string) { return map[val]; }\r\n}\r\nfunction toTypeString(str: unknown) { return _toString.call(str) }\r\nfunction noop() { }\r\n\r\nexport { isObject, isDef, isPlainObject, isPromise, toString, toNumber, toMap, noop, toTypeString }", "import { isObject } from \"packages/utils\";\r\nexport function reactivity(obj) {\r\n    return createReactiveObject(obj, {})\r\n}\r\n\r\nexport function createReactiveObject(target, handlers) {\r\n    if (!isObject(target)) return target;\r\n    const proxy = new Proxy(target, handlers)\r\n    return proxy\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACEA,WAAS,SAAS,KAAU;AAAE,WAAO,OAAO,QAAQ;AAAA,EAAS;;;ACDtD,WAAS,WAAW,KAAK;AAC5B,WAAO,qBAAqB,KAAK,CAAC,CAAC;AAAA,EACvC;AAEO,WAAS,qBAAqB,QAAQ,UAAU;AACnD,QAAI,CAAC,SAAS,MAAM;AAAG,aAAO;AAC9B,UAAM,QAAQ,IAAI,MAAM,QAAQ,QAAQ;AACxC,WAAO;AAAA,EACX;",
  "names": []
}
